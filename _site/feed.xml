<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-23T02:36:35+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CodingLog(by JackSmith-c)</title><subtitle>기억보다 기록을 추구하는 나의 코딩일지</subtitle><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><entry><title type="html">코딩일지(2024-02-22)</title><link href="http://localhost:4000/2024-02/codinglog(37)/" rel="alternate" type="text/html" title="코딩일지(2024-02-22)" /><published>2024-02-22T00:00:00+09:00</published><updated>2024-02-22T00:00:00+09:00</updated><id>http://localhost:4000/2024-02/codinglog(37)</id><content type="html" xml:base="http://localhost:4000/2024-02/codinglog(37)/"><![CDATA[<h1 id="오늘-드디어-파이레이서에-학습을-시켰다">오늘 드디어 파이레이서에 학습을 시켰다!!</h1>

<h2 id="파이레이서의-학습에-대해서">파이레이서의 학습에 대해서…</h2>

<p>오늘 드디어 파이레이서에 학습을 시켰다.
라즈베리파이에 학습시키는 건 너무 오래 걸릴 것 같아서,
일단 나의 랩탑으로 옮겨왔다.
근데 기존 명령어가 안먹혀서 일단은 dcworks에 있는 학습버튼을 눌러서 학습을 시켰다.
나중에는 <code class="language-plaintext highlighter-rouge">donkey train -tub ./data -model ./models/mypilot.h5</code>을 써먹어봐야 겠다.
혹시 될지도 모르겠다. 왜냐하면 2월 8일 일기를 보면 알겠지만, 가상학습을 위 명령어로 트레이닝 시켰기 때문이다.</p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-02" /><category term="shell" /><summary type="html"><![CDATA[오늘 드디어 파이레이서에 학습을 시켰다!!]]></summary></entry><entry><title type="html">코딩일지(2024-02-08)</title><link href="http://localhost:4000/2024-02/codinglog(36)/" rel="alternate" type="text/html" title="코딩일지(2024-02-08)" /><published>2024-02-08T00:00:00+09:00</published><updated>2024-02-08T00:00:00+09:00</updated><id>http://localhost:4000/2024-02/codinglog(36)</id><content type="html" xml:base="http://localhost:4000/2024-02/codinglog(36)/"><![CDATA[<h1 id="스로틀링-문제를-해결중이다">스로틀링 문제를 해결중이다.</h1>
<h2 id="configpy코드-둘러보기">config.py코드 둘러보기</h2>

<p>이전까지는 Pi-Racer에서 뒤로가기, 즉 후전을 하지 못했었는데, 성준이 형이 드디어 해결했다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208181639081.png" alt="image-20240208181639081" /></p>

<p>위와 같이 THROTTLE_REVERSE_PWM속성에 속성값을 220(기본값)에서 10~50사이로 조정해봤더니, 후전이 구현되는 것을 확인하였다.</p>

<p>원래 이걸로 학습데이터를 수집하고 학습결과로 “pilot.h5”모델을 export해야 하는데, 아직 그렇게 못했다.</p>

<p>그래서 일단은 트레이닝을 어떻게 시키는지에 대해 알아보는 중이다.</p>

<h2 id="그래서-지금-launchjson파일을-보고-있다">그래서 지금 launch.json파일을 보고 있다.</h2>

<p>우리가 실행에 사용해야 할 파일들이 뭔지 파악해보고 있다.</p>

<p>그리고 이거를 보고 알게 된것이 있는데, 우리가 보통 shell상에서 주행을 시작할때, 다음과 같이 명령어를 떄린다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">manage</span><span class="p">.</span><span class="n">py</span> <span class="n">drive</span>
</code></pre></div></div>

<p>위 명령어를 해석하면 다음과 같다.</p>

<p><b>python</b> -&gt; python패키지 관리자를 통해서 실행하려는 파일을 앞에 적는다. 그러면 관리자가 해당 파일(여기서는 manage.py)을 파이썬 인터프리터에 넣어서 돌리게 된다.</p>

<p><b>manage.py</b> -&gt; 패키지관리자가 실행해야 할 목적이 되는 파일명이다. 여기서는 manage.py를 넣었다. 이를 통해 해당 파일을 실행할 수 있다.</p>

<p><b>drive</b> -&gt; python 패키지 관리자는 파일명 뒤에 있는 것을 무조건 상수(args)로 인식한다.</p>

<p>그래서 위 조건을 launch.json에 vscode상의 버튼으로 구현해본다면 다음과 같다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"donkeycar_sim_2 drive"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"python"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"request"</span><span class="p">:</span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"program"</span><span class="p">:</span><span class="s2">"${workspaceFolder}/app/donkeycar_sim_2/manage.py"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/app/donkeycar_sim_2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"drive"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"console"</span><span class="p">:</span><span class="s2">"integratedTerminal"</span><span class="w">
</span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div>

<p>그 외에 좀더 보다가 알게 된것이, main이 되는 워크스페이스(dcworks)을 vscode상에서 열었을때, 이상하게  가상환경을 담당하는 env 디렉토리가 사라진 것이었다. 파일탐색기로 들어가면 존재했음에도 불구하고 말이다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208192323100.png" alt="image-20240208192323100" /></p>

<p>그래서 env파일을 편집하기 위해 env로 폴더열기를 해서 기본이 되는 루트위치를 바꿔놨다.</p>

<p>뭐… 이상한 삽질하다가, 지금은 다른 삽질 중이다.</p>

<h2 id="미니콘다로-가상환경-구축을-다시-진행해보자">미니콘다로 가상환경 구축을 다시 진행해보자.</h2>

<p>미니콘다에다가 가상환경을 테스트해볼려고 시험중이다.</p>

<p>나는 home 디렉토리(C:\Users\1) 안에 있는 miniconda3에서 가상환경에 접근해보았다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208223447414.png" alt="image-20240208223447414" /></p>

<p>위와 같이 env안에 donkey라는 디렉토리가 있다. 여기에는 너무 다양한 디렉토리가 있지만, 나중에 다시 미니콘다에다가 작업을 하는 경우가 또 있을 것 같다. 이걸로 작업 시도중이다.</p>

<p>지금 뒤져보다가 한가지 알게 된것이 일단,</p>

<p><code class="language-plaintext highlighter-rouge">Lib</code>에는 디렉토리 형태로(패키지형태라 해야하나?) 라이브러리 파일들이 정리되어 있는 것을 보았고,</p>

<p><code class="language-plaintext highlighter-rouge">Library</code>에는 <code class="language-plaintext highlighter-rouge">bin</code>,<code class="language-plaintext highlighter-rouge">include</code>,<code class="language-plaintext highlighter-rouge">lib</code>,<code class="language-plaintext highlighter-rouge">ssl</code>라는 총 네개의 디렉토리가 있었다. 잘은 모르겠는데, openssl이라는 파일들이 많이 있었다. 그래서 조금 찾아봤다.</p>

<blockquote>
  <p>OpenSSL은 TLS와 SSL의 오픈소스 구현판이라 한다. 이 프로그램은 암호화 기능과 유틸리티 함수들이 들어가 있다고 한다. 그리고 C언어로 작성되어 있다고 한다.</p>

  <p>참고로 TLS와 SSL은 데이터 통신에 쓰이는 프로토콜 일종이다. 그냥 이정도만 알아두자.</p>
</blockquote>

<p>일단 그렇다 한다ㅋㅋ</p>

<p>그리고 이렇게 가상환경을 확인해보았으면 이번에는 프로젝트를 가져와보는 코드들을 리뷰해보자.</p>

<p>(사실 이거는 예전에 1월30일자 코딩일지에 기록했던 내용들이다.)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>donkey<span class="o">)</span> C:<span class="se">\U</span>sers<span class="se">\1</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>위와 같이 가상환경에 접속후 홈디렉토리에 들어간 이후,</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>projects
<span class="nb">cd </span>projects
git clone https://github.com/autorope/donkeycar
<span class="nb">cd </span>donkeycar
git checkout main
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
</code></pre></div></div>

<p>이후 버전충돌 문제를 아래와 같이 해결했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span><span class="nv">h5py</span><span class="o">==</span>2.10.0 <span class="nv">packaging</span><span class="o">==</span>20.9 <span class="nv">wrapt</span><span class="o">==</span>1.12.1
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge h5py
</code></pre></div></div>

<p>마지막으로 동키카 프로젝트에서 사용할 나의 작업용 동키카를 하나 생성해주었다.</p>

<p>찾아보니 mycar는 총 두가지 템플릿 중 하나를 설치할 수 있다고 한다. 그래서 나는 고민하다가,</p>

<p>두개를 깔아보자고 생각했다. 아래와 같이 말이다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208232319913.png" alt="image-20240208232319913" /></p>

<p>1.딥러닝 템플릿 동키카</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--template</span><span class="o">=</span>path_follow <span class="nt">--path</span> ~/projects/cars/car_dl
</code></pre></div></div>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208232501954.png" alt="image-20240208232501954" /></p>

<p>2.컴퓨터비전 템플릿 동키카</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--template</span><span class="o">=</span>cv_control <span class="nt">--path</span> ~/projects/cars/car_cv
</code></pre></div></div>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208232522896.png" alt="image-20240208232522896" /></p>

<p>이후 car_cv에 들어가서 <code class="language-plaintext highlighter-rouge">python manage.py drive</code> 명령어를 쳐주었다. 참고로 python은 패키지 관리자를 뜻하고, manage.py를 실행을 목표로 하는 파일대상, drive는 여기에 먹일 인수(args)이다.</p>

<p>근데 다음과 같은 오류가 떴다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240208233033011.png" alt="image-20240208233033011" /></p>

<p>이때 <code class="language-plaintext highlighter-rouge">pip install cv2</code>를 쓰니 오류가 떠서, <code class="language-plaintext highlighter-rouge">conda install -c conda-forge opencv</code>를 썼다. 그러니 이슈를 해결했다.</p>

<p>이후,</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda update <span class="nt">-n</span> base <span class="nt">-c</span> defaults conda
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge <span class="nb">.</span>
</code></pre></div></div>

<p>이 부분은 포기했다. 일단 doc를 보기로 했다.</p>

<hr />

<h2 id="동키카-doc">동키카 DOC</h2>

<p>이전에 이 config.py가 기본값이라는 것을 알고 있었고, myconfig.py는 어떻게 쓰는지 몰랐는지 이번에 DOC를 보면서 알게 되었다. 다음 내용을 보자.</p>

<blockquote>
  <p>새 버전의 당나귀차로 업데이트할 때는 애플리케이션 폴더를 새로 고쳐야 합니다. 동일한 명령으로 이 작업을 수행할 수 있지만 –overwrite를 추가하여 myconfig.py 파일을 지우지 않도록 합니다.</p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--template</span><span class="o">=</span>cv_control <span class="nt">--path</span><span class="o">=</span>~/mycar <span class="nt">--overwrite</span>
</code></pre></div></div>

<p>어쨋든 config.py는 그냥 그대로 두고, myconfig.py를 편집후 덮어쓰기(overwrite)를 하는 방식으로 작업을 해야 한다고 한다.</p>

<h3 id="경로선-추적기">경로(선) 추적기</h3>

<blockquote>
  <p>내장된 알고리즘으로 하여금 Pi-Camera를 사용하여 선을 추적하여 따라갈 수 있다고 한다.</p>

  <p>기본적으로 노란색 선으로 조정되어 있지만 어찌어찌 조정하면 추적하는 색상을 구성할 수 있다고 한다.</p>

  <p>더 나아가 알고리즘의 다른 많은 측면도 조정할 수 있다고 한다. 아래는 알고리즘에 대한 설명과 구성값을 사용하는 방법에 대한 내용이라 한다. 값 자체는 뒤에 나열되어 설명되어 있다고 한다.</p>
</blockquote>

<h3 id="donkey-command-line-utilities">Donkey Command-line Utilities</h3>

<h4 id="1create-car">1.Create Car</h4>

<pre><code class="language-sheell">donkey createcar --path &lt;dir&gt; [--overwrite] [--template &lt;donkey2&gt;]
</code></pre>

<h4 id="2find-car">2.Find Car</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="nb">env</span><span class="o">)</span> C:<span class="se">\U</span>sers<span class="se">\1\D</span>ocuments<span class="se">\d</span>cworks<span class="se">\l</span>ibrary<span class="se">\d</span>onkeycar&gt;donkey findacar
________             ______                   _________
___  __ <span class="se">\_</span>______________  /___________  __    __  ____/_____ ________
__  / / /  __ <span class="se">\_</span>  __ <span class="se">\_</span>  //_/  _ <span class="se">\_</span>  / / /    _  /    _  __ <span class="sb">`</span>/_  ___/
_  /_/ // /_/ /  / / /  ,&lt;  /  __/  /_/ /     / /___  / /_/ /_  /
/_____/ <span class="se">\_</span>___//_/ /_//_/|_| <span class="se">\_</span>__/_<span class="se">\_</span>_, /      <span class="se">\_</span>___/  <span class="se">\_</span>_,_/ /_/
                                 /____/

using donkey v5.0.dev3 ...
Usage: The available commands are:
<span class="o">[</span><span class="s1">'createcar'</span>, <span class="s1">'findcar'</span>, <span class="s1">'calibrate'</span>, <span class="s1">'tubclean'</span>, <span class="s1">'tubplot'</span>, <span class="s1">'tubhist'</span>, <span class="s1">'makemovie'</span>, <span class="s1">'createjs'</span>, <span class="s1">'cnnactivations'</span>, <span class="s1">'update'</span>, <span class="s1">'train'</span>, <span class="s1">'models'</span>, <span class="s1">'ui'</span><span class="o">]</span>
</code></pre></div></div>

<h4 id="3calibrate-car-차량-보정하기">3.Calibrate Car (차량 보정하기)</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey calibrate <span class="nt">--channel</span> &lt;0-15 channel <span class="nb">id</span><span class="o">&gt;</span>
</code></pre></div></div>

<h4 id="4clean-data-in-tub">4.Clean data in Tub</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey tubclean &lt;folder containing tubs&gt;
</code></pre></div></div>

<h4 id="5train-the-model">5.Train the model</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey train <span class="nt">--tub</span><span class="o">=</span>&lt;tub_path&gt; <span class="o">[</span><span class="nt">--config</span><span class="o">=</span>&lt;config.py&gt;] <span class="o">[</span><span class="nt">--model</span><span class="o">=</span>&lt;model path&gt;] <span class="o">[</span><span class="nt">--type</span><span class="o">=(</span>linear|categorical|inferred<span class="o">)]</span> <span class="o">[</span><span class="nt">--transfer</span><span class="o">=</span>&lt;transfer model path&gt;]
</code></pre></div></div>

<h4 id="6make-movie-from-tub">6.Make Movie from Tub</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey makemovie <span class="nt">--tub</span><span class="o">=</span>&lt;tub_path&gt; <span class="o">[</span><span class="nt">--out</span><span class="o">=</span>&lt;tub_movie.mp4&gt;] <span class="o">[</span><span class="nt">--config</span><span class="o">=</span>&lt;config.py&gt;] <span class="o">[</span><span class="nt">--model</span><span class="o">=</span>&lt;model path&gt;] <span class="o">[</span><span class="nt">--model_type</span><span class="o">=(</span>linear|categorical|inferred|rnn|imu|behavior|localizer|3d<span class="o">)]</span> <span class="o">[</span><span class="nt">--start</span><span class="o">=</span>0] <span class="o">[</span><span class="nt">--end</span><span class="o">=</span><span class="nt">-1</span><span class="o">]</span> <span class="o">[</span><span class="nt">--scale</span><span class="o">=</span>2] <span class="o">[</span><span class="nt">--salient</span><span class="o">]</span>
</code></pre></div></div>

<h4 id="7plot-predictions">7.Plot Predictions</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey tubplot <span class="nt">--tub</span><span class="o">=</span>&lt;tub_path&gt; <span class="nt">--model</span><span class="o">=</span>&lt;model_path&gt; <span class="o">[</span><span class="nt">--limit</span><span class="o">=</span>&lt;end_index&gt;] <span class="o">[</span><span class="nt">--type</span><span class="o">=</span>&lt;model_type&gt;] 
</code></pre></div></div>

<h4 id="8tub-histogram">8.Tub Histogram</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey tubhist <span class="nt">--tub</span><span class="o">=</span>&lt;tub_path&gt; <span class="nt">--record</span><span class="o">=</span>&lt;record_name&gt; <span class="nt">--out</span><span class="o">=</span>&lt;output_filename&gt;
</code></pre></div></div>

<h4 id="9joystic-wizard조이스틱-생성기">9.Joystic Wizard(조이스틱 생성기)</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createjs
</code></pre></div></div>

<h4 id="10visualize-cnn-filter-activations">10.Visualize CNN filter activations</h4>

<p><b>Usage:</b></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey cnnactivations <span class="o">[</span><span class="nt">--tub</span><span class="o">=</span>&lt;data_path&gt;] <span class="o">[</span><span class="nt">--model</span><span class="o">=</span>&lt;path to model&gt;]
</code></pre></div></div>

<p><b>Example:</b></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey cnnactivations <span class="nt">--model</span> models/model.h5 <span class="nt">--image</span> data/tub/1_cam-image_array_.jpg
</code></pre></div></div>

<h4 id="11show-models-database">11.Show Models database</h4>

<blockquote>
  <p>Note: This is only available in donkeycar &gt;= 4.3.1</p>
</blockquote>

<p><b>Usage:</b></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey models <span class="o">[</span><span class="nt">--group</span><span class="o">]</span> 
</code></pre></div></div>

<h4 id="12donkey-ui">12.Donkey UI</h4>

<blockquote>
  <p>Note: This section only applies to version &gt;= 4.2.0</p>
</blockquote>

<hr />

<h3 id="configpy파일-분석하기">config.py파일 분석하기</h3>

<p>현재 donkey-gym(가상환경)에 대한 부분을 분석중이다.</p>

<p>일단 <b>이전</b> donkey-gym부분에 대한 코드이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DONKEY_GYM</span> <span class="o">=</span> <span class="bp">True</span>   
<span class="n">DONKEY_SIM_PATH</span> <span class="o">=</span> <span class="sh">"</span><span class="s">C:</span><span class="se">\\</span><span class="s">Users</span><span class="se">\\</span><span class="s">1</span><span class="se">\\</span><span class="s">DonkeySimWin</span><span class="se">\\</span><span class="s">donkey_sim.exe</span><span class="sh">"</span> 
<span class="c1">#"/home/tkramer/projects/sdsandbox/sdsim/build/DonkeySimLinux/donkey_sim.x86_64" when racing on virtual-race-league use "remote", or user "remote" when you want to start the sim manually first.
</span><span class="n">DONKEY_GYM_ENV_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">donkey-generated-roads-v0</span><span class="sh">"</span> 
<span class="c1"># ("donkey-generated-track-v0"|"donkey-generated-roads-v0"|"donkey-warehouse-v0"|"donkey-avc-sparkfun-v0")
</span></code></pre></div></div>

<p>그리고 <b>이후</b> donkey-gym부분에 대한 코드이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">DONKEY_GYM</span> <span class="o">=</span> <span class="bp">True</span>
 
 <span class="c1"># DONKEY_SIM_PATH = "/home/tkramer/projects/sdsandbox/sdsim/build/DonkeySimLinux/donkey_sim.x86_64" when racing on virtual-race-league use "remote", or user "remote" when you want to start the sim manually first.
</span> <span class="nf">if </span><span class="p">(</span><span class="n">platform</span><span class="p">.</span><span class="nf">system</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Windows</span><span class="sh">'</span><span class="p">):</span>
     <span class="c1">#dspath = "C:\\Users\\1\\DonkeySimWin\\donkey_sim.exe"
</span>     <span class="n">dspath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">~/DonkeySimWin/donkey_sim.exe</span><span class="sh">"</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">dspath</span><span class="p">):</span>
         <span class="n">dspath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">../../../../../DonkeySimWin/donkey_sim.exe</span><span class="sh">"</span>
         <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="n">DONKEY_SIM_PATH</span> <span class="o">=</span> <span class="n">dspath</span>
 <span class="nf">elif </span><span class="p">(</span><span class="n">platform</span><span class="p">.</span><span class="nf">system</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Darwin</span><span class="sh">'</span><span class="p">):</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">~/Applications/donkey_sim.app/Contents/MacOS/donkey_sim</span><span class="sh">"</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="n">DONKEY_SIM_PATH</span> <span class="o">=</span> <span class="n">dspath</span>
 <span class="k">else</span><span class="p">:</span> <span class="c1"># 'Linux'
</span>     <span class="n">dspath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">~/donkey_sim</span><span class="sh">"</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="n">dspath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">dspath</span><span class="p">)</span>
     <span class="n">DONKEY_SIM_PATH</span> <span class="o">=</span> <span class="n">dspath</span>
 
 <span class="n">DONKEY_GYM_ENV_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">donkey-generated-track-v0</span><span class="sh">"</span> 
 <span class="c1"># ("donkey-generated-track-v0"|"donkey-generated-roads-v0"|"donkey-warehouse-v0"|"donkey-avc-sparkfun-v0")
</span></code></pre></div></div>

<p>위 코드를 보았을때 나는 한가지 의문이 들었던게 있었다.</p>

<p>왜 굳이 dspath라는 변수를 하나 더 써서 변화된 값을 받아들일까?
나중에 생각해보고 알게 된 것이 최종적인 경로설정을 잡아주기 위함인 것이었다.</p>

<p>뭔말이냐면, 말 그대로 DONKEY_SIM_PATH는 상수로서 한번 값을 넣으면 그 값울 쭉~ 사용하는 것이다.</p>

<p>그리고 여기서 한가지 알아둘게, <b><code class="language-plaintext highlighter-rouge">DONKEY_GYM_ENV_NAME</code></b>는 나의 차량이 처음 어떤 경기장에 놓이게 할지를 설정하는 거다. 아래와 같다.</p>

<ol>
  <li>donkey-generated-track-v0</li>
</ol>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209115239018.png" alt="image-20240209115239018" /></p>

<ol>
  <li>donkey-generated-roads-v0</li>
</ol>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209115329986.png" alt="image-20240209115329986" /></p>

<ol>
  <li>donkey-warehouse-v0</li>
</ol>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209115205671.png" alt="image-20240209115205671" /></p>

<ol>
  <li>donkey-avc-sparkfun-v0</li>
</ol>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209115402924.png" alt="image-20240209115402924" /></p>

<p>만약 config.py파일에 <code class="language-plaintext highlighter-rouge">DONKEY_GYM_ENV_NAME = "donkey-generated-roads-v0"</code>이라 있을지라도, myconfig.py파일에 <code class="language-plaintext highlighter-rouge">DONKEY_GYM_ENV_NAME = "donkey-avc-sparkfun-v0"</code>이라고 되어 있으면, config.py파일에 myconfig.py파일의 내용들이 덮어씌어지게 된다. 즉 override되는 것이었다.</p>

<p>이런 원리로 동작하므로 config.py파일은 건드리지 말고 myconfig.py파일만 건드리자.</p>

<p>이왕 이런 원리로 동작하는 걸 알게 되었으니 myconfig.py파일에 있는 다른 코드들도 주석을 해제해보았다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GYM_CONF</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">body_style</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">bare</span><span class="sh">"</span><span class="p">,</span>
			<span class="sh">"</span><span class="s">body_rgb</span><span class="sh">"</span> <span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">128</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">car_name</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">JackSmith</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">font_size</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">100</span><span class="p">}</span>
</code></pre></div></div>

<p>그러더니 아래와 같이 나의 차체가 바뀌었다. 차 이름도 바뀌었고 말이다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209120723599.png" alt="image-20240209120723599" /></p>

<p>이번에는 조금 더 바꿔보았다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GYM_CONF</span> <span class="o">=</span> <span class="p">{</span> <span class="sh">"</span><span class="s">body_style</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">car01</span><span class="sh">"</span><span class="p">,</span>
			<span class="sh">"</span><span class="s">body_rgb</span><span class="sh">"</span> <span class="p">:</span> <span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">car_name</span><span class="sh">"</span> <span class="p">:</span> <span class="sh">"</span><span class="s">SungWoong</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">font_size</span><span class="sh">"</span> <span class="p">:</span> <span class="mi">50</span><span class="p">}</span>
</code></pre></div></div>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209121056199.png" alt="image-20240209121056199" /></p>

<p>config.py파일은 여기까지 보고 이제 train.py파일을 보고 있다.</p>

<h3 id="trainpy파일-분석하기">train.py파일 분석하기</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="sh">"""</span><span class="s">
Scripts to train a keras model using tensorflow.
Basic usage should feel familiar: train.py --tubs data/ --model models/mypilot.h5

Usage:
    train.py [--tubs=tubs] (--model=&lt;model&gt;)
    [--type=(linear|inferred|tensorrt_linear|tflite_linear)]
    [--comment=&lt;comment&gt;]

Options:
    -h --help              Show this screen.
</span><span class="sh">"""</span>

<span class="kn">from</span> <span class="n">docopt</span> <span class="kn">import</span> <span class="n">docopt</span>
<span class="kn">import</span> <span class="n">donkeycar</span> <span class="k">as</span> <span class="n">dk</span>
<span class="kn">from</span> <span class="n">donkeycar.pipeline.training</span> <span class="kn">import</span> <span class="n">train</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">args</span> <span class="o">=</span> <span class="nf">docopt</span><span class="p">(</span><span class="n">__doc__</span><span class="p">)</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">dk</span><span class="p">.</span><span class="nf">load_config</span><span class="p">()</span>
    <span class="n">tubs</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="sh">'</span><span class="s">--tubs</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="sh">'</span><span class="s">--model</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">model_type</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="sh">'</span><span class="s">--type</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">comment</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="sh">'</span><span class="s">--comment</span><span class="sh">'</span><span class="p">]</span>
    <span class="nf">train</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tubs</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">model_type</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>이 train.py는 텐서플로우를 사용하여 케라스 모델을 훈련시키는 스크립트라고 나와있는 것 같다.</p>

<p>기본 사용을 위한 명령어는 다음과 같다고 나와 있다.</p>

<blockquote>
  <p>train.py –tubs data/ –model models/mypilot2.h5</p>
</blockquote>

<p>근데 이상하게 작동이 안되고 꺼져 버려서 <a href="https://docs.donkeycar.com/guide/deep_learning/train_autopilot/#train-a-model">공식문서</a>를 보았더니 이렇게 하라고 나와있었다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209194859462.png" alt="image-20240209194859462" /></p>

<blockquote>
  <p>donkey train –tub ./data –model ./models/mypilot.h5</p>
</blockquote>

<p>그러더니 아래와 같이 훈련을 작동시킬 수 있었다.</p>

<p><img src="/images/2024-02-08-codinglog(36)/image-20240209194043369.png" alt="image-20240209194043369" /></p>

<p>20분 정도 학습을 시켰는데 진행상황이 <code class="language-plaintext highlighter-rouge">Epoch:10/100</code>이었다. 충격적이었다. 계산해보면, 대략 10배의 시간을 쏟아야 한다는 계산이 나오고 그러면 총 200분, 즉 3시간 20분이 걸린다는 계산이 나온다.</p>

<p>이미 models라는 파일 있고 그안에 h5파일이 만들어져 있기에 여기서 학습을 중단하기로 했다.</p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-02" /><category term="python" /><summary type="html"><![CDATA[스로틀링 문제를 해결중이다. config.py코드 둘러보기]]></summary></entry><entry><title type="html">코딩일지(2024-02-04)</title><link href="http://localhost:4000/2024-02/codinglog(35)/" rel="alternate" type="text/html" title="코딩일지(2024-02-04)" /><published>2024-02-04T00:00:00+09:00</published><updated>2024-02-04T00:00:00+09:00</updated><id>http://localhost:4000/2024-02/codinglog(35)</id><content type="html" xml:base="http://localhost:4000/2024-02/codinglog(35)/"><![CDATA[<h1 id="dcworks너란-녀석-어렵다">dcworks..너란 녀석.. 어렵다..</h1>

<h2 id="dcworks에서-기본코드-돌려보기">dcworks에서 기본코드 돌려보기</h2>

<p>내가 만약 아래 dcworks 디렉토리에서 아래로 들어가 library/donkeycar라는 내부 디렉토리에 들어가게 되면은 아래와 같이 donkey라는 패키지 관리자 명령어를 사용할 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--path</span> ~/mycar
</code></pre></div></div>

<p>이때 ~/mycar를 하면 이 ~에 해당하는게 어딘지 추적해보니 아래와 같이 <code class="language-plaintext highlighter-rouge">C:\Users\1</code>이라고 한다.</p>

<div style="text-align:center;">
    <img src="/images/2024-02-04-codinglog(35)/image-20240204115212134.png" alt="image-20231230154210231" style="zoom:100%;" />
</div>

<p>그래서 나는 dcworks디렉토리 아래 자식디렉토리로 mycar를 만들기 위해 일단 ~/dcworks로 경로 이사를 갔다.</p>

<p>그리고 ~/dcworks/mycar의 형태로 내차량의 생성위치를 잡아주었다.</p>

<p>아까 그냥 dcworks를 뒤져보다가 예전에 교수님께서 submoudle관련해서 말씀하신게 생각나서 들어가보았다.</p>

<p><img src="/images/2024-02-04-codinglog(35)/image-20240204120337514.png" alt="image-20240204120337514" /></p>

<p><code class="language-plaintext highlighter-rouge">.gitsubmodules</code>안에는 다음과 같이, 5가지의 서브모듈이 있었다.</p>

<p>이것들은 교수님이 만드신 dcworks 아래에 물려있는 서브모듈들에 대한 정보가 git_url로 담겨져 있는 정보다.</p>

<p>바로 위 텍스트파일이 있었기 때문에, 아래 명령어를 사용할 수 있었던 것이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git submodule update <span class="nt">--init</span>
</code></pre></div></div>

<hr />

<p>다시 본론으로 돌아와서, test.py라는 파일을 만들고 donkeycar_docs에 있는 아래 코드를 넣어주었다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">donkey</span> <span class="k">as</span> <span class="n">dk</span>

<span class="c1">#initialize the vehicle
</span><span class="n">V</span> <span class="o">=</span> <span class="n">dk</span><span class="p">.</span><span class="nc">Vehicle</span><span class="p">()</span>

<span class="c1">#add a camera part
</span><span class="n">cam</span> <span class="o">=</span> <span class="n">dk</span><span class="p">.</span><span class="n">parts</span><span class="p">.</span><span class="nc">PiCamera</span><span class="p">()</span>
<span class="n">V</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cam</span><span class="p">,</span> <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">],</span> <span class="n">threaded</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1">#add tub part to record images
</span><span class="n">tub</span> <span class="o">=</span> <span class="n">dk</span><span class="p">.</span><span class="n">parts</span><span class="p">.</span><span class="nc">Tub</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">'</span><span class="s">~/mycar/data</span><span class="sh">'</span><span class="p">,</span>
                   <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">],</span>
                   <span class="n">types</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">image_array</span><span class="sh">'</span><span class="p">])</span>
<span class="n">V</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">tub</span><span class="p">,</span> <span class="n">inputs</span><span class="o">=</span><span class="n">inputs</span><span class="p">)</span>

<span class="c1">#start the vehicle's drive loop
</span><span class="n">V</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="n">max_loop_count</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<p>위 donkeycar는 자동차에 새로운 부품을 쉽게 추가할 수 있도록 설계되었는데, 그래서 카메라에서 이미지를 캡처하고 저장하는 자동차애플리케이션의 예제코드를 통해 테스트를 진행해볼 수 있다.</p>

<p><img src="/images/2024-02-04-codinglog(35)/image-20240204130512696.png" alt="image-20240204130512696" /></p>

<p>그리고 위와 같이 돌려봤는데, 계속 쪽박을 찬다.  분석을 좀 해보니, donkeycar라는 디렉토리에 두번 들어가며 parts라는 디렉토리가 있고, 여기서 차량에 들어가는 각 부품들에 대해서 파이썬코드로 만들어서(이미 만들어져 있기에 그냥 가져다 쓰면된다) manage.py라는 파일에 부품을 코드상으로 부착해서 쓸 수 있겠다.</p>

<p>근데 오류를 보니 picamera2가 없다고 하니, 지금 설정이 가상 카메라가 아니라 라즈베리파이 카메라로 설정된 것 같아 가상카메라로 변경하여 문제를 해결해보려고 한다.</p>

<p><img src="/images/2024-02-04-codinglog(35)/image-20240204132718730.png" alt="image-20240204132718730" /></p>

<p>여기서 camera.py를 들어가면 다양한 클래스들이 있다. 각 클래스는 카메라 종류별로 설정되어 있는 것 같다. 일단 모듈별로 정리해보겠다.</p>

<h3 id="1-logging">1. <code class="language-plaintext highlighter-rouge">logging</code></h3>

<p>로깅기능을 제공하는 모듈로, 코드 실행 중에 메세지를 기록하여 디버깅이나 로그 기록에 사용된다.</p>

<h3 id="2-os">2. <code class="language-plaintext highlighter-rouge">os</code></h3>

<p>운영체제 관련 기능을 제공하는 모듈로, 파일 경로 조작이나 환경변수 접근과 같은 기능을 제공한다.</p>

<h3 id="3-time">3. <code class="language-plaintext highlighter-rouge">time</code></h3>

<p>시간과 관련된 함수를 제공하는 모듈로, 시간 지연이나 현재시간을 얻는데 사용된다.</p>

<h3 id="4-numpy-imported-as-np">4. <code class="language-plaintext highlighter-rouge">numpy</code> (imported as np)</h3>

<p>수치계산을 위한 라이브러리로, 다차원 배열과 행렬을 다루는데 특화되어 있다.</p>

<h3 id="5-pil-python-imaging-library">5. <code class="language-plaintext highlighter-rouge">PIL</code> (Python Imaging Library)</h3>

<p>이미지 처리를 위한 라이브러리로, 이미지를 로드하고 저장하며 다양한 이미지 조작기능을 제공한다고 한다.</p>

<h3 id="6glob">6.<code class="language-plaintext highlighter-rouge">glob</code></h3>

<p>파일 경로를 이용하여 디렉토리 내의 파일들을 검색하는데 사용되는 모듈입니다. 특히, 와일드카드를 사용한 파일 패턴 검색에 유용하다.</p>

<h3 id="7donkeycarutils">7.<code class="language-plaintext highlighter-rouge">donkeycar.utils</code></h3>

<p>DonkeyCar 프로젝트에서 사용되는 유틸리티 함수들을 모아 놓은 모듈이다. 여기서는 <code class="language-plaintext highlighter-rouge">rgb2gray</code> 함수를 사용하고 있다. 이 함수는 RGB 이미지를 그레이스케일로 변환하는데 사요오딘다. DonkeyCar 프로젝트는 오픈소스 자율주행 RC카를 구축하기 위한 프로젝트로, 이미지 처리 및 자동차 제어와 관련된 다양한 기능을 제공한다.</p>

<p>이번에는 클래스별로 정리해보겠다.</p>

<ul>
  <li>CameraError(Exception)</li>
  <li>BaseCamera</li>
  <li>PiCamera(BaseCamera): RaspberryPi용 IMX219-160 카메라 제어 클래스</li>
  <li>Webcam(BaseCamera): 웹캠을 사용하여 이미지를 획득하는 클래스</li>
  <li>CSICamera(BaseCamera): Jetson Nano용 IMX219 카메라 제어 클래스</li>
  <li>V4LCamera(BaseCamera): V4L(Video4Linux)를 사용하여 이미지를 획득하는 클래스</li>
  <li>MockCamera(BaseCamera): 가상의 카메라를 제어하는 클래스(이미지 프레임을 회득하는 대신, 미리 지정된 정적 이미지 프레임을 반환함. 하드웨어 카메라가 없는 유니티 가상환경에서 코드를테스트하거나 디버깅할때 사용하는 용도임.)</li>
  <li>ImageListCamera(BaseCamera): 디렉토리에 저장된 이미지들을 가상의 카메라 출력으로 사용함.</li>
</ul>

<p>이렇게 다양한 클래스들중에 우리가 사용하는 것은 가상카메라와 파이카메라뿐이다.</p>

<p>그리고 어렵게 생각할 필요도 없이 순서는 공통적으로 다음과 같다.</p>

<blockquote>
  <p>1.클래스 초기화 및 카메라 초기화
2.이미지 업데이트
3.이미지 반환 
4.쓰레드 실행 및 처리
5.카메라 정지</p>
</blockquote>

<p>이번에는 parts디렉토리에 있던 web_controller로 들어가서 조종용 웹사이트를 실행하는 web.py에 대해 분석해보았다.</p>

<p><img src="/images/2024-02-04-codinglog(35)/image-20240204140703416.png" alt="image-20240204140703416" /></p>

<p>일단 모듈별로 정리해보았다.</p>

<h3 id="1-os">1. <code class="language-plaintext highlighter-rouge">os</code></h3>

<p>운영체제 관련 기능을 제공하는 모듈로, 파일 경로 조작이나 환경 변수 접근과 같은 기능을 제공합니다.</p>

<h3 id="2-json">2. ‘json’</h3>

<p>JSON(JavasScript Object Notation) 형식의 데이터를 다루기 위한 모듈로, JSON 데이터의 인코딩 및 디코딩을 제공합니다.</p>

<h3 id="3-logging">3. <code class="language-plaintext highlighter-rouge">logging</code></h3>

<p>로깅 기능을 제공하는 모듈로, 코드 실행 중에 메세지를 기록하여 디버깅이나 추적에 사용된다.</p>

<h3 id="4-time">4. <code class="language-plaintext highlighter-rouge">time</code></h3>

<p>시간과 곤련된 함수를 제공하는 모듈로, 시간 지연이나 현재 시간을 얻는데 사용된다고 한다.</p>

<h3 id="5-asyncio">5. <code class="language-plaintext highlighter-rouge">asyncio</code></h3>

<p>비동기 프로그래밍을 지원하는 모듈로, 비동기 함수와 이벤트 루프를 통해 비동기 코드르 작성할 수 있게 합니다.</p>

<h3 id="6-requests">6. <code class="language-plaintext highlighter-rouge">requests</code></h3>

<p>HTTP 요청을 쉽게 보내고 받을 수 있게 해주는 모듈로, 웹 서버와 통신하는데 사용됩니다.</p>

<h3 id="7-tornadoioloop">7. <code class="language-plaintext highlighter-rouge">tornado.ioloop</code></h3>

<p>Tornado의 I/O 루프를 제공하는 모듈로, 비동기 이벤트 핸들리을 가능하게 합니다.</p>

<h3 id="8-tornadoweb">8. <code class="language-plaintext highlighter-rouge">tornado.web</code></h3>

<p>Tornado의 웹 관련 클래스와 함수를 제공하는 모듈로, 웹 애플리케이션을 구축하는데 사용됩니다.</p>

<h3 id="9-tornadogen">9. <code class="language-plaintext highlighter-rouge">tornado.gen</code></h3>

<p>비동기 코드를 작성할 때 사용되는 Tornado의 제너레이터 기반 도구를 제공하는 모듈로, <code class="language-plaintext highlighter-rouge">@tornado.gen.coroutine</code> 데코레이터 등이 있다.</p>

<h3 id="10-tornadowebsocket">10. <code class="language-plaintext highlighter-rouge">tornado.websocket</code></h3>

<p>Tornado에서 WebSocket을 지원하는 클래스와 함수를 제공하는 모듈로, 웹소켓 통신을 구현할 때 사용됩니다.</p>

<h3 id="11-socket">11. <code class="language-plaintext highlighter-rouge">socket</code></h3>

<p>네트워크 소켓을 생성하고 통신하는데 사용되는 모듈로, 호스트 이름과 관련된 정보를 얻을 수 있습니다.</p>

<p>이번에는 클래스별로 정리해보겠다.</p>

<ul>
  <li>RemoteWebServer(): 차량의 상태 및 제어명령을 폴링방식으로 받아옴</li>
  <li>LocalWebController(tornado.web.Application): 웹서버를 전체적으로 설정하고 관리</li>
  <li>DriveAPI(RequestHandler): 차량의 운전상태 및 제어명령을 변경할 수 있는 웹페이지 제공</li>
  <li>WsTest(RequestHandler): 웹소켓을 테스트할 수 있는 웹페이지를 제공</li>
  <li>CalibrateHandler(ReuqestHandler): 차량의 칼리브레이션 설정을 변경</li>
  <li>WebSocketDriveAPI(tornado.websocket.WebSocketHandler): (차량과 서버간의 통신을 위한)웹 소켓 헨들러</li>
  <li>WebSocketCalibrateAPI(tornado.websocket.WebSocketHandler): (클라이언트와 서버간의 통신을 위한)웹 소켓 헨들러</li>
  <li>VideoAPI(RequestHandler): MJPEG(Motion JPEG) 스트리밍을 제공하는 웹 헨들러</li>
  <li>BaseHandler(ReuqestHandler): 웹페이지를 제공하는 기본 헨들러</li>
  <li>WebFpv(Application): Tornado웹프레임워크를 통한 실시간 FPV 웹서버 실행</li>
</ul>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-02" /><category term="python" /><summary type="html"><![CDATA[dcworks..너란 녀석.. 어렵다..]]></summary></entry><entry><title type="html">코딩일지(2024-02-03)</title><link href="http://localhost:4000/2024-02/codinglog(34)/" rel="alternate" type="text/html" title="코딩일지(2024-02-03)" /><published>2024-02-03T00:00:00+09:00</published><updated>2024-02-03T00:00:00+09:00</updated><id>http://localhost:4000/2024-02/codinglog(34)</id><content type="html" xml:base="http://localhost:4000/2024-02/codinglog(34)/"><![CDATA[<h1 id="캐글에-가입해보았다">캐글에 가입해보았다!</h1>

<h2 id="캐글에-가입해보았다-1">캐글에 가입해보았다!</h2>

<p>일단 사이트에 들어가주었다.</p>

<p><img src="/images/2024-02-03-codinglog(34)/image-20240204101946091.png" alt="image-20240204101946091" /></p>

<p>좌측상단의 “Sign in” 를 클릭하고,</p>

<p><img src="/images/2024-02-03-codinglog(34)/image-20240204102144483.png" alt="image-20240204102144483" /></p>

<p>나의 구글계정과 연동해서 “YUNSUNGWOONG”이라는 이름으로 가입을 해주었다.</p>

<p><img src="/images/2024-02-03-codinglog(34)/image-20240204102234580.png" alt="image-20240204102234580" /></p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-02" /><category term="python" /><summary type="html"><![CDATA[캐글에 가입해보았다!]]></summary></entry><entry><title type="html">코딩일지(2024-02-01)</title><link href="http://localhost:4000/2024-02/codinglog(33)/" rel="alternate" type="text/html" title="코딩일지(2024-02-01)" /><published>2024-02-01T00:00:00+09:00</published><updated>2024-02-01T00:00:00+09:00</updated><id>http://localhost:4000/2024-02/codinglog(33)</id><content type="html" xml:base="http://localhost:4000/2024-02/codinglog(33)/"><![CDATA[<h1 id="모터문제를-해결하고-학습을-진행하자">모터문제를 해결하고 학습을 진행하자!</h1>

<h2 id="모터문제를-해결하다">모터문제를 해결하다.</h2>

<p>어제 모터문제로 애를 먹었었다. 그래서 오늘 아침에 서보모터만 뜯어서 나의 아두이노에 연결을 해보았다.</p>

<p>아래는 그때 사용한 코드이다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;Servo.h&gt;</span><span class="cp">
</span><span class="n">Servo</span> <span class="n">servo</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">servo</span><span class="p">.</span><span class="n">attach</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">())</span>
  <span class="p">{</span>
    <span class="kt">char</span> <span class="n">in_data</span><span class="p">;</span>
    <span class="n">in_data</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="k">if</span><span class="p">(</span><span class="n">in_data</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">value</span> <span class="o">+=</span> <span class="mi">30</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">180</span><span class="p">)</span>
      <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">servo</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 코드는 Arduino와 Servo 모터를 사용하여 시리얼 통신을 통해 스티어링 모션을 제어하는 예제코드이다.</p>

<p>일단 setup()부분에서 아두이노의 7번핀을 통해 신호를 주도록 해주었다. 그래서 PWM세팅에 변화를 주면 이 7번핀의 전류신호가 변하게 될 것이다.</p>

<p>그리고 loop()부분에서 시리얼 모니터에서 입력한 값을 받아 문자형 변수<code class="language-plaintext highlighter-rouge">in_data</code>에 저장하고, 그 값이 문자’1’인지 판단하고 참이면 Servo모터의 위치값을 30씩 증가시킨다. 그리고 모터의 위치값이 만약 180이 되면 0으로 초기화시킨다 그리고 만약 ‘1’이 아닌 다른 문자가 수신되면 이떄도 Servo 모터의 위치값을 0으로 초기화한다. 이 코드를 아두이노에 upload하고 돌려보니 차량의 모터가 어느정도 돌아가는 것을 볼수가 있었다. 한가지 아쉬운 점은 모터가 중간에 덜덜 거린다는 것이었다. 그럴때는 같은 값을 두번 입력해줘야 문제가 해결되었다.</p>

<h3 id="모터가-덜덜-떨리는-이슈는-축의-문제-때문이다">모터가 덜덜 떨리는 이슈는 축의 문제 때문이다!</h3>

<p><a href="https://blog.naver.com/dokkosam/221387857799">찾아보니</a> 서보모터에 설정된 값을 업로드 할경우, 축이 ‘덜덜덜’ 떨릴 떄가 있다고 한다. 이는 최소치의 각도와 최대치의 각도를 설정해줄때, 자주 생기는 문제라 카더라?ㄷㄷ. (물론 서보모터의 축이 플라스틱 재질이라 내구성 측면에서 취약하기 때문에, 약해서 떨리는 것도 있겠지만)이를 해결하기 위해 축이 금속으로 된 서보모터를 사용하면 이 점을 보완할수도 있고, 코드상으로 보완하기 위해서는 servo모터를 안전하게 사용하기 위해 사용하는 전용코드인 <code class="language-plaintext highlighter-rouge">(Servo).detach()</code>를 사용하는 방법이다.</p>

<p><img src="/images/2024-02-01-codinglog(33)/image-20240201135535128.png" alt="image-20240201135535128" /></p>

<p>코드리뷰:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">#include &lt;Servo.h&gt;</code>: Servo 라이브러리를 포하합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Servo servo</code>: Servo 객체를 생성합니다</li>
  <li><code class="language-plaintext highlighter-rouge">void setup()</code>: 초기 설정을 수행하는 함수입니다.</li>
</ol>

<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">servo.attach(9);</code> : Servo 모터를 7번핀에 연결</li>
    <li><code class="language-plaintext highlighter-rouge">servo.write(90);</code> : Servo 모터를 초기위치로 설정하기 위해 90도 회전</li>
    <li><code class="language-plaintext highlighter-rouge">delay(1000)</code> : 1초 동안 대기</li>
    <li><code class="language-plaintext highlighter-rouge">servo.detach()</code> : Servo 모터를 작동 멈춤 상태로 전환</li>
  </ul>
</blockquote>

<p>이 코드의 목적은 단순하다. 한줄로 말하자면 “동작 끝냈어? 그러면 전원 끊어!”이거다.</p>

<p>아두이노가 setup()을 실행하면 Servo모터를 90도 회전시킬 것이다. 1초 대기후 detach()를 써서해당 모터를 논리적으로 때어내어 전원을 끊어낸다.</p>

<p>이제 이 코드를 라즈베리 파이에 녹여내기 위해 파이썬 참조코드로 변환해보았다.</p>

<h3 id="파이썬-코드라즈베리파이버전">파이썬 코드(라즈베리파이버전)</h3>

<p>아두이노의 동작을 대체하기 위해 <code class="language-plaintext highlighter-rouge">RPi.GPIO</code> 라이브러리를 사용했다. 변환된 예제코드는 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">RPi.GPIO</span> <span class="k">as</span> <span class="n">GPIO</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="c1"># GPIO 핀 번호 설정
</span><span class="n">servo_ppin</span> <span class="o">=</span> <span class="mi">7</span>

<span class="c1"># GPIO 초기화
</span><span class="n">GPIO</span><span class="p">.</span><span class="nf">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="p">.</span><span class="n">BOARD</span><span class="p">)</span>
<span class="n">GPIO</span><span class="p">.</span><span class="nf">setup</span><span class="p">(</span><span class="n">servo_pin</span><span class="p">,</span> <span class="n">GPIO</span><span class="p">.</span><span class="n">OUT</span><span class="p">)</span>

<span class="c1"># 서보모터 객체 생성
</span><span class="n">servo</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">.</span><span class="nc">PWM</span><span class="p">(</span><span class="n">servo_pin</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span> <span class="c1"># PWM 주파수 50Hz 설정
</span>
<span class="k">try</span><span class="p">:</span>
	<span class="c1"># 서보모터를 초기 위치로 설정(90도)
</span>    <span class="n">servo</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mf">7.5</span><span class="p">)</span> <span class="c1">#duty cycle 값 설정(2.5%는 0도, 12.5%는 180도)
</span>    
    <span class="c1"># 1초 대기
</span>    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="c1"># 서보 모터 작동 멈춤
</span>    <span class="n">servo</span><span class="p">.</span><span class="nf">stop</span><span class="p">()</span>
    <span class="n">GPIO</span><span class="p">.</span><span class="nf">cleanup</span><span class="p">()</span>
</code></pre></div></div>

<p>아두이노에서는 ‘Servo.h’ 헤더파일을 사용하여 서버모터를 제어했었는데 여기서는 서보모터든 블루투스 모듈이든 상관없이 GPIO.PWM()을 사용하게 된다.</p>

<p>좀 더 코드리뷰하자면, <code class="language-plaintext highlighter-rouge">RPi.GPIO</code> 라이브러리를 사용하여 GPIO핀을 설정하고 Servo 모터를 제어한다. <code class="language-plaintext highlighter-rouge">PWM</code>을 사용하여 서보 모터의 각도를 조절하고, <code class="language-plaintext highlighter-rouge">time.sleep()</code>함수를 이용하여 1초 동안 대기합니다. 코드 실행이 끝나면 <code class="language-plaintext highlighter-rouge">servo.stop()</code>과  <code class="language-plaintext highlighter-rouge">GPIO.cleanup()</code>을 사용하여 전원을 논리적으로 끊어줄 수 있겠다.</p>

<p>근데 나는 여기 <code class="language-plaintext highlighter-rouge">servo.start(7.5)</code>에서 왜 하필 7.4인가?라는 자문을 했었는데, 다음과 같은 원리가 있었다.</p>

<ul>
  <li>
    <p>‘7.5’는 PWM(Pulse Width Modulation)의 duty cycle을 나타낸다. Servo 모터는 펄스의 폭에 따라 움직이며, 일반적으로 이 펄스 폭이 1ms에서 2ms 사이의 값을 갖습니다. 따라서 ‘7.5’는 duty cycle이 7.5%인 펄스를 생성하는 것을 의미한다.</p>
  </li>
  <li>서보모터의 각도는 펄스 폭에 따라 결정되며, 펄스의 길이가 짧을수록 모터는 한쪽으로 회전하고, 길면 다른방향으로 회전합니다. 대부분의 서보모터는 0도와 180도 사이에서 동작하며, 각도에 따라 duty cycle을 조정하여 제어한다고 한다.</li>
  <li>서보모터의 각도와 듀티 사이클간의 관계는 다음과 같다.</li>
</ul>

<div style="text-align:center;">
    <img src="/images/2024-02-01-codinglog(33)/image-20240201152541276.png" alt="image-20231230154210231" style="zoom:100%;" />
</div>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-02" /><category term="C" /><category term="python" /><summary type="html"><![CDATA[모터문제를 해결하고 학습을 진행하자!]]></summary></entry><entry><title type="html">코딩일지(2024-01-31)</title><link href="http://localhost:4000/2024-01/codinglog(32)/" rel="alternate" type="text/html" title="코딩일지(2024-01-31)" /><published>2024-01-31T00:00:00+09:00</published><updated>2024-01-31T00:00:00+09:00</updated><id>http://localhost:4000/2024-01/codinglog(32)</id><content type="html" xml:base="http://localhost:4000/2024-01/codinglog(32)/"><![CDATA[<h1 id="오늘-학습까지만이라도-시켜보자">오늘! 학습까지만이라도 시켜보자!</h1>

<h2 id="일단-piracer의-바퀴제어까지는-성공했다">일단 PiRacer의 바퀴제어까지는 성공했다.</h2>

<p>일단 교수님 도움으로 차량을 원격으로 구동시키는 것까지 끝냈다.</p>

<p>추가적으로 배터리의 상태라던가 이런것들 알아보고 싶어 chatGPT로 찾아봤더니 <b>vcgencmd</b>라는 모듈이 있다는 것을 알았다.(<a href="https://www.elinux.org/RPI_vcgencmd_usage">링크</a>)</p>

<p>이 모듈로 다음 정보등을 알 수 있었다.</p>

<ol>
  <li>메모리 정보</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pi@raspberrypi:~ <span class="nv">$ </span>vcgencmd get_mem arm <span class="o">&amp;&amp;</span> vcgencmd get_mem gpu
<span class="nv">arm</span><span class="o">=</span>948M
<span class="nv">gpu</span><span class="o">=</span>76M
</code></pre></div></div>

<ol>
  <li>동작 온도</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pi@raspberrypi:~ <span class="nv">$ </span>vcgencmd measure_temp
<span class="nv">temp</span><span class="o">=</span>43.8<span class="s1">'C
</span></code></pre></div></div>

<ol>
  <li>동작 클럭 속도</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pi@raspberrypi:~ <span class="nv">$ </span><span class="k">for </span>clock <span class="k">in </span>arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi<span class="p">;</span> <span class="k">do</span> <span class="se">\ </span>                                                         
  <span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$clock</span><span class="s2">:</span><span class="se">\t</span><span class="si">$(</span>vcgencmd measure_clock <span class="nv">$clock</span><span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="se">\</span>
<span class="k">done
</span>arm:	frequency<span class="o">(</span>48<span class="o">)=</span>1800457088
core:	frequency<span class="o">(</span>1<span class="o">)=</span>500000992
h264:	frequency<span class="o">(</span>28<span class="o">)=</span>0
isp:	frequency<span class="o">(</span>45<span class="o">)=</span>0
v3d:	frequency<span class="o">(</span>46<span class="o">)=</span>499987808
uart:	frequency<span class="o">(</span>22<span class="o">)=</span>48001464
pwm:	frequency<span class="o">(</span>25<span class="o">)=</span>107143064
emmc:	frequency<span class="o">(</span>50<span class="o">)=</span>249987312
pixel:	frequency<span class="o">(</span>29<span class="o">)=</span>81000000
vec:	frequency<span class="o">(</span>10<span class="o">)=</span>0
hdmi:	frequency<span class="o">(</span>9<span class="o">)=</span>120010256
dpi:	frequency<span class="o">(</span>4<span class="o">)=</span>0
</code></pre></div></div>

<h3 id="트러블슈팅">트러블슈팅</h3>

<p>위 vcgencmd명령어를 사용할때 계속 문제가 생겼던 것이 있다.</p>

<p>예를 들어 <code class="language-plaintext highlighter-rouge">vcgencmd version</code>를 치면 버전정보만 떠야 하는데 쓸데없이 앞에 에러가 하나 붙어서 나왔다.</p>

<p>(그래도 다행히 아예 안나오는 문제는 아니었다.)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">env</span><span class="o">)</span> pi@raspberrypi:~/mycar <span class="nv">$ </span>vcgencmd version
ERROR: ld.so: object <span class="s1">'/usr/lib/arm-linux-gnueabihf/libatomic.so.1'</span> from LD_PRELOAD cannot be preloaded <span class="o">(</span>cannot open shared object file<span class="o">)</span>: ignored.
Mar 17 2023 10:50:39 
Copyright <span class="o">(</span>c<span class="o">)</span> 2012 Broadcom
version 82f3750a65fadae9a38077e3c2e217ad158c8d54 <span class="o">(</span>clean<span class="o">)</span> <span class="o">(</span>release<span class="o">)</span> <span class="o">(</span>start<span class="o">)</span>
</code></pre></div></div>

<p>위에서 ERROR가 하나 뜨고 그 아래에는 내가 원하는 정보들이 나왔다.</p>

<blockquote>
  <p>ERROR: ld.so: object ‘/usr/lib/arm-linux-gnueabihf/libatomic.so.1’ from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.</p>
</blockquote>

<p>그래서 다음과 같이 위 경로에 실제로 파일이 있는지를 확인해보았다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> /usr/lib/arm-linux-gnueabihf/libatomic.so.1
</code></pre></div></div>

<p>그러자 없다고 해서 그냥 깔았다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>libatomic1
</code></pre></div></div>

<p>근데 읭?? 이미 깔려있다는 모순적인 상황이 발생했다. 그래서 그러면 이미 깔려있는 그 파일이 어디에 있는지 수소문 해서 찾아보았다.(find명령어를 쓰면 해당 파일이 어디에 있는지 알아서 찾아준다. 다만 시간이 좀 걸린다)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>find / <span class="nt">-name</span> libatomic.so.1
</code></pre></div></div>

<p>그리고 결과로 나온 경로에 들어가보니 여기에 있었다.</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131143353946.png" alt="image-20240131143353946" /></p>

<p>그래서 나는 시스템 상의 환경변수를 바꿔주는 방식으로 해서 vcgencmd 명령어가 해당 파일을 찾아올때 그 경로는 환경변수 상에서 바꿔줄까 하다가 괜히 잘못 건드리는게 아닌가 싶어 그냥 해당 명령어가 원하는 대로 해당 경로에 디렉토리를 만들어주고(<code class="language-plaintext highlighter-rouge">sudo mkdir arm-linux-gnueabihf</code>) 위 경로에 있었던 파일을 카피해서 내가 만들어둔 폴더에 붙여넣기 해주었다.</p>

<p>그랬더니 오류는 정상적으로 잡혔다.</p>

<hr />

<p>문제가 생겼다.</p>

<p>차량 앞바퀴의 회전을 시키기 위해서는 pull-bar를 제어하는 모터에 문제가 생긴것 같다.</p>

<p>기본적으로 뒷바퀴는 앞으로 갔다 뒤로 갔다의 역할만 수행한다.</p>

<p>이 모터는 hobbywing사의 Quic WP 1625 듀얼 브러시라고 한다.(<a href="https://www.hobbywing.com/en/products/quicrun-wp-1625-brushed53.html">링크</a>)</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131172646693.png" alt="image-20240131172646693" /></p>

<p>근데 다행히 앞뒤로 제대로 쓰로틀링후 동작을 하는 것으로 보아 이거 문제는 아니고, 문제는 풀바를 제어하는</p>

<p>앞바퀴 제어 모터인, SPT 17HV-180 6Kg Waterproof Servo 25T였다. 줄여서 SPT Servo 라고도 한다.(<a href="https://ko.aliexpress.com/i/1005004968209650.html?gatewayAdapt=glo2kor">링크</a>)</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131173005371.png" alt="image-20240131173005371" /></p>

<p>근데 내가 아까 PWM을 세팅하는 테스트를 진행하다가 호기심에 강제로 모터부분을 돌려보았다.</p>

<p>근데 이것때문인지, 이후 모터가 스스로 덜덜거리면서 조금 돌더니 멈췄다(이때 죽어버린것 같다ㅜ..)</p>

<p>그래서 지금 해결책을 찾고 있다. 모터를 원래 초기값을 되돌릴 수 있는지, 해결방안을 모색하고 있다. 정안되면 알리익스프레스에서 구매해야 한다ㅜㅠ.일단 최대한 해보고 안되면 빨리 사야겠다.</p>

<p>고장을 코드상으로 해결할 수 있는 방법을 찾아보다가, 나처럼 덜덜거리는 문제가 발생했었을때 해결책을 제시한 블로그가 있었다(<a href="https://blog.naver.com/dokkosam/221387857799">링크</a>).</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131175940813.png" alt="image-20240131175940813" /></p>

<p>일단 예전에 아두이노 샀을때 딸려왔던 학습용 서보모터로 코드를 돌려보고 나서, 동키카 차량에 있는 서보모터를 나의 아두이노에 연결해서 돌려보아야 겠다.</p>

<h2 id="이제-calibrate-donkeycar를-접근해보자링크">이제 Calibrate Donkeycar를 접근해보자!(<a href="https://www.waveshare.com/wiki/DonkeyCar_for_Pi-Calibrate_DonkeyCar">링크</a>)</h2>

<p>아래는 위 Calibrate Donkeycar페이지에 대한 내용을 번역하면서 공부해보려고 한다.</p>

<blockquote>
  <p>Donkeycar가 회전성공여부를 확인하려면 HW와 SW 모두에서 자동차를 칼리브레이트(보정)해야 한다.</p>

  <p>조립할 때 앞바퀴를 앞쪽으로 유지하십시오. 풀바(pull-bars)의 길이를 조정해야 합니다.</p>
</blockquote>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131153626597.png" alt="image-20240131153626597" /></p>

<p>pull-bar는 PWM세팅을 어떻게 하냐에 따라 다른 동작결과를 보여주었다.</p>

<p>서보모터를 회전시키면 그에따라 풀바가 동작하게 되고, 풀바가 움직이면서 좌회전,우회전으로 회전시킬수가 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 가상환경 실행</span>
<span class="nb">source</span> ~/workspace/dcworks/env/bin/activate
<span class="c"># 차량에 접근</span>
<span class="nb">cd </span>mycar/
<span class="c"># 스티어링 서보(모터) 회전 테스트 실행</span>
donkey calibrate <span class="nt">--channel</span> 0 <span class="nt">--bus</span><span class="o">=</span>1
</code></pre></div></div>

<p>스티어링 서보가 회저하는지확인하기 위해 위 명령어를 취해주고 100과 600을 각각 입력해주었다.</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240131154705593.png" alt="image-20240131154705593" /></p>

<p>서보가 중앙위치로 회전하도록 값을 조정하고 그 값을 기억해두어야 한다. 예를 들어, 값 330이 작동하고 서보가 중앙에 유지될 수 있다면 이를 기준으로 -100인 230과 +100인 430이 서보가 맨 왼쪽과 맨 오른쪽으로 회전할 수 있도록 할 수 있는지 테스트할 수가 있다.</p>

<p>그런 다음 맨 왼쪽 데이터와 맨 오른쪽 데이터를 얻은 후에는 config.py 파일을 수정하고, 다음 속성을 변경할수가 있다.</p>

<ul>
  <li>STEERING_LEFT_PWM</li>
  <li>STEERING_RIGHT_PWM</li>
</ul>

<p>근데 이때 스티어링 서보가 너무 크게 또는 너무 작게 회전하도록 설정할수는 없다.</p>

<p><img src="/images/2024-01-31-codinglog(32)/image-20240201155507809.png" alt="image-20240201155507809" /></p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-01" /><category term="python" /><category term="shell" /><summary type="html"><![CDATA[오늘! 학습까지만이라도 시켜보자!]]></summary></entry><entry><title type="html">코딩일지(2024-01-30)</title><link href="http://localhost:4000/2024-01/codinglog(31)/" rel="alternate" type="text/html" title="코딩일지(2024-01-30)" /><published>2024-01-30T00:00:00+09:00</published><updated>2024-01-30T00:00:00+09:00</updated><id>http://localhost:4000/2024-01/codinglog(31)</id><content type="html" xml:base="http://localhost:4000/2024-01/codinglog(31)/"><![CDATA[<h1 id="미니콘다-설치해보기">미니콘다 설치해보기</h1>
<h2 id="host-pc에-미니콘다를-설치해보았다테스트용">Host PC에 미니콘다를 설치해보았다.(테스트용)</h2>

<p>원래 1월25일자 코딩일지에서 동키카를 설치하는 험난한 여정을 거쳤다. 하지만 그럼에도 불구하고 제대로 되지 않았다. 그래서 이번에는 미니콘다를 등에 지고, 이게 있으면 버전관리가 잘 되기 때문에 엄청난 지원군이 된다. 그래서 이걸 뒤에 이고 깔아보겠다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>C:<span class="se">\U</span>ser<span class="se">\1\w</span>orkspace
conda create <span class="nt">-n</span> donkey <span class="nv">python</span><span class="o">=</span>3.9
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130030458564.png" alt="image-20240130030458564" /></p>

<p>여기서 donkeycarworks는 프로젝트 이름이다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130030508910.png" alt="image-20240130030508910" /></p>

<p>어쩃든 깔리긴 했다. 위 문구를 보니 설치된 서브모듈들이 보인다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The following NEW packages will be INSTALLED:

  ca-certificates    pkgs/main/win-64::ca-certificates-2023.12.12-haa95532_0
  certifi            pkgs/main/win-64::certifi-2022.12.7-py37haa95532_0
  openssl            pkgs/main/win-64::openssl-1.1.1w-h2bbff1b_0
  pip                pkgs/main/win-64::pip-22.3.1-py37haa95532_0
  python             pkgs/main/win-64::python-3.7.16-h6244533_0
  setuptools         pkgs/main/win-64::setuptools-65.6.3-py37haa95532_0
  sqlite             pkgs/main/win-64::sqlite-3.41.2-h2bbff1b_0
  vc                 pkgs/main/win-64::vc-14.2-h21ff451_1
  vs2015_runtime     pkgs/main/win-64::vs2015_runtime-14.27.29016-h5e58377_2
  wheel              pkgs/main/win-64::wheel-0.38.4-py37haa95532_0
  wincertstore       pkgs/main/win-64::wincertstore-0.2-py37haa95532_2
</code></pre></div></div>

<p>그리고 가상환경이 깔렸으니, 활성화/비활성화 명령어에 대해서 알려주고 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#</span>
<span class="c"># To activate this environment, use</span>
<span class="c">#</span>
<span class="c">#     $ conda activate donkey</span>
<span class="c">#</span>
<span class="c"># To deactivate an active environment, use</span>
<span class="c">#</span>
<span class="c">#     $ conda deactivate</span>
</code></pre></div></div>

<p>깔린 경로는 당연히 현 위치에 깔릴줄 알았는데 아니었다. miniconda3디렉토리 아래에  envs라는 폴더가 있는데 그 안에 디렉토리 목록중 하나로 잡혀있었다.</p>

<p>이제 실행을 해보았다. 일단 구축된 가상환경들의 목록을 보자.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda info <span class="nt">--envs</span>
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130030526679.png" alt="image-20240130030526679" /></p>

<p>한가지 간과했던게 터미널(프롬프트)의 위치가 해당 가상환경 폴더 위에 있어야 한다는 것이다.</p>

<p>가상환경을 시작하면 다음과 같이 명령줄 앞에 소괄호의 이름이 바뀌게 된다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130030703975.png" alt="image-20240130030703975" /></p>

<p>그리고 다시 동키카 사이트에 문을 두드렸다.(<a href="https://docs.donkeycar.com/guide/host_pc/setup_windows/">링크</a>)</p>

<p>해당 링크에서는 윈도우 호스트 PC라 할지라도 호환성을 위해 WSL을 사전에 설치해서 작업하는 것을 권장하고 있다. 까라면 까야지.. 그래서 이에 대한 작업도 해주었다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt <span class="nb">install </span>python3-pip
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libmtdev1 libgl1 xclip
</code></pre></div></div>

<p>(갑자기 WSL이 동작안해서 위 명령어 못썼다ㄷㄷ)</p>

<p>위 작업을 했으면 다시 윈도우 cmd창에서 작업하라고 한다.(<a href="https://docs.donkeycar.com/guide/install_software/#step-2-install-software-on-donkeycar">링크</a>)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>projects
<span class="nb">cd </span>projects
git clone https://github.com/autorope/donkeycar
<span class="nb">cd </span>donkeycar
git checkout main
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130031131739.png" alt="image-20240130031131739" /></p>

<p>그 이후에 사이트에서는 pip install -e .[pc]를 복붙하라고 나와있는데 이건 잘못되었다. 엄밀히 말하면 의도를 오해할수있게 적어놓은건데, pc버전에서는 <code class="language-plaintext highlighter-rouge">pip install -e .</code>라고 쓰세요~ 라는 의미였다ㅋㅋ</p>

<p><code class="language-plaintext highlighter-rouge">pip install -e .</code> 명령어를 입력해주었는데, 의존성 문제가 발생했다. h5py모듈(어찌 익숙하다ㅋ)와 텐서플로우 간의 버전충돌로 인한 의존성 이슈가 발생했다. 그래서 다음 조치를 취했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span><span class="nv">h5py</span><span class="o">==</span>2.10.0 <span class="nv">packaging</span><span class="o">==</span>20.9 <span class="nv">wrapt</span><span class="o">==</span>1.12.1
conda <span class="nb">install</span> <span class="nt">-c</span> conda-forge h5py
</code></pre></div></div>

<p>어찌저찌해도 다음과 같이 원하는 경로에 잘 깔렸다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130032033651.png" alt="image-20240130032033651" /></p>

<p>마지막으로 동키카 프로젝트에서 사용할 나의 작업용 동키카를 하나 생성해줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar --path ~/mycar
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130032846307.png" alt="image-20240130032846307" /></p>

<p>그랬더니 사용자 이름 디렉토리 바로 아래에 자식 디렉토리로 생성되었다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130032516741.png" alt="image-20240130032516741" /></p>

<h3 id="참고">※참고</h3>

<p>위와 같이 일반 mycar를 설치하는 것 뿐만 아니라 다음 명령어로 다양한 템플릿의 작업용 동키카를 생성하는 것도 가능하다.</p>

<ol>
  <li>딥러닝 템플릿 동키카</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--template</span><span class="o">=</span>path_follow <span class="nt">--path</span> ~/mycar
</code></pre></div></div>

<ol>
  <li>컴퓨터 비전 템플릿 동키카</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>donkey createcar <span class="nt">--template</span><span class="o">=</span>cv_control <span class="nt">--path</span> ~/mycar
</code></pre></div></div>

<p>그리고 이렇게 만든 차량에 대한 정보를 vscode같은 에디터를 켜지 않고 cmd창에서 <code class="language-plaintext highlighter-rouge">nano</code>라는 명령어를 통해 알 수 있다.(편집도 쌉가능!)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano myconfig.py
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130033152928.png" alt="image-20240130033152928" /></p>

<p>이제 마지막으로 드라이버를 깔고 다음 명령어를 실행하면 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py drive
</code></pre></div></div>

<p>이제 이 방식을 본격적으로 라즈베리파이에 적용시켜보자!</p>

<h2 id="raspberrypi에-미니콘다를-설치해보았다실전용">RaspberryPi에 미니콘다를 설치해보았다.(실전용)</h2>

<p>일단 본격적으로 작업 들어가기 전에 인터넷에 연결되어 있는지 확인해봐야 한다. (gui상으로는 와이파이에 연결되어도 초기설정오류로 실제로는 연결안되는 경우가 있기 때문이다.) 다음 명령어를 쳐서 확인하자.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping google.com
</code></pre></div></div>

<p>제대로 되었으면 아래 명령어를 진행하자!</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get upgrade
</code></pre></div></div>

<p>카메라가 제대로 구동되는지 확인차, 다음명령어를 수행했다.(<a href="https://m.blog.naver.com/no1_devicemart/223024266270">링크</a>)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>libcamera-hello <span class="nt">-t</span> 0
</code></pre></div></div>

<p>근데 화면이 180도 뒤집혀서 나오는데 이거는 나중에 opencv깔아서 해결해야겠다.</p>

<p>이후 raspi-config에 들어가서 <code class="language-plaintext highlighter-rouge">Advanced Options</code>-<code class="language-plaintext highlighter-rouge">Expand Filesystem</code>을 활성화시켜주었다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">Interfacing Options</code>-<code class="language-plaintext highlighter-rouge">I2C</code>도 활성화해주었다. 레거시 카메라도 활성화시켜주라고 나와있는데, 그렇게하면 원격이 꺼져버려서 아직 해결하지 못했다.</p>

<p>다시 미니콘다 작업으로 넘어갔다.</p>

<ol>
  <li>설치하고(wget), 스크립트 실행하기(bash)</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-aarch64.sh
bash Miniconda3-py39_4.10.3-Linux-aarch64.sh


<span class="nb">sudo md5sum  </span>Miniconda3-py39_4.10.3-Linux-aarch64.sh
<span class="nb">sudo</span> /bin/bash  Miniconda3-py39_4.10.3-Linux-aarch64.sh
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130050807520.png" alt="image-20240130050807520" /></p>

<p>2.conda에 대한 환경변수 설정해주기</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/home/pi/miniconda3/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">sudo </span>reboot <span class="nt">-h</span> now
<span class="c">#또는 이렇게도 가능하다</span>
<span class="nb">echo</span> <span class="s1">'export PATH="/home/pi/miniconda3/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
</code></pre></div></div>

<ol>
  <li>콘다 설치 여부 확인하기(버전확인)</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nt">--version</span>
</code></pre></div></div>

<p>conda명령어에 버전여부를 확인한다는 것은 conda패키지 관리자가 제대로 깔렸고, 해당 conda명령어를 쓸수있는지 확인한다는 뜻이다.</p>

<ol>
  <li>‘donkey’ 가상환경 구축하기</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> donkey <span class="nv">python</span><span class="o">=</span>3.9
conda activate donkey
</code></pre></div></div>

<p>위 가상환경 구축에 실패했다.</p>

<hr />

<p>그래서 이번에는 aarch64버전이 아닌 32비트 버전으로 설치해볼까 하다가, 다음 (<a href="https://docs.conda.io/projects/miniconda/en/latest/">링크</a>)에 있던 방법을 써보기로 했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># miniconda3이름의 디렉토리 생성</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/miniconda3

<span class="c"># setup용 파일 다운로드</span>
wget https://repo.anaconda.com/miniconda/Miniconda3-py38_4.10.3-Linux-aarch64.sh

<span class="c"># 파일을 실행한 압축 푼 파일을 ~/miniconda3에 넣기</span>
<span class="nb">chmod</span> +x Miniconda3-py38_4.10.3-Linux-aarch64.sh
<span class="nb">sudo</span> /bin/bash Miniconda3-py38_4.10.3-Linux-aarch64.sh <span class="nt">-b</span> <span class="nt">-u</span> <span class="nt">-p</span> /home/pi/miniconda3

<span class="c"># 기존 setup용 파일 삭제</span>
<span class="nb">rm</span> <span class="nt">-rf</span> ~/miniconda3/miniconda.sh
</code></pre></div></div>

<p>위 동작을 수행하고도 conda를 인식하지 못했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># miniconda3이름의 디렉토리 생성</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/miniconda3

<span class="c"># setup용 파일 다운로드</span>
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-armv7l.sh

<span class="c"># 파일을 실행한 압축 푼 파일을 ~/miniconda3에 넣기</span>
<span class="nb">chmod</span> +x Miniconda3-latest-Linux-armv7l.sh
<span class="nb">sudo</span> /bin/bash Miniconda3-latest-Linux-armv7l.sh <span class="nt">-b</span> <span class="nt">-p</span> /home/pi/miniconda3
</code></pre></div></div>

<hr />

<p>도전히 안되서 이전 sd카드로 넘어와서 다시 기존껄로 작업해보려고 한다.</p>

<p>일단 기존에 구축한 가상환경을 실행했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/workspace/dcworks/env/bin/activate
</code></pre></div></div>

<p>그리고 내가 만든 차량에다가, drive(실행)를 진행했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="nb">env</span><span class="o">)</span> pi@raspberrypi:~<span class="nv">$ </span><span class="nb">cd </span>mycar/
<span class="o">(</span><span class="nb">env</span><span class="o">)</span> pi@raspberrypi:~<span class="nv">$ </span>python manage.py drive
</code></pre></div></div>

<p>그랬더니 다음과 같은 이슈가 발생..</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130125507075.png" alt="image-20240130125507075" /></p>

<p>다음과 같이 조치했다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>adafruit-circuitpython-pca9685
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3-dev libatlas-base-dev
</code></pre></div></div>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130130021188.png" alt="image-20240130130021188" /></p>

<p>어? 잘되네? 근데 이제는 잘되면 더 불안해지는 것 같다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130131723875.png" alt="image-20240130131723875" /></p>

<p>일단 성공적으로 webControl까지는 구현이 되었다. 아직은 web에서 조작까지 하는데 있어서는 드라이버 연동이 필요해 보인다.</p>

<h3 id="teleoperation링크">TeleOperation(<a href="https://www.waveshare.com/wiki/DonkeyCar_for_Pi-Teleoperation">링크</a>)</h3>

<p>지금 현재 config.py파일만 분석중이다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130140958929.png" alt="image-20240130140958929" /></p>

<p><code class="language-plaintext highlighter-rouge">STEERING_PWM_PIN=13</code>을 보아 13번 핀을 사용하고, <code class="language-plaintext highlighter-rouge">THROTTLE_PWM_PIN=18</code>을 보아 18번 핀도 사용하는 것 같다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130141421415.png" alt="image-20240130141421415" /></p>

<p>위 방식으로 manage.py파일을 열면 xbox 플스게임패드로, 조작이 가능하다고 한다.</p>

<p>참고로 복사해서 붙여넣기 할때는 <code class="language-plaintext highlighter-rouge">ctrl+shift+v</code>라 한다.</p>

<p>아래와 같이 <code class="language-plaintext highlighter-rouge">USE_JOYSTICK_AS_DEFAULT = Ture</code>로 해주면 일반 웹제어 모드로 시작을 하는게 아니라 게임패드 쓰는 걸 기본값으로 한다는 뜻이다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130141825310.png" alt="image-20240130141825310" /></p>

<p>위와 같이 옵션을 바꿔주는 것을 잊지 말자.</p>

<p>이렇게 설정을 바꿔주고도 게임패드로는 작동이 되지 않았다. 분명 로그를 보면 작동기록이 찍히는 것을 보아 라즈베리파이에서는 명령을 주는게 맞다. 하지만 실제로 작동되지 않는 것으로 보아 내가 생각하기에는 차량보드 자체에서 서보모터랑 스텝모터에 전원공급이 아예 안되서 발생한 문제 갔다.</p>

<p>아마 라즈베리파이에서 전원을 공급할 떄와 차량보드 배터리에서 전원을 공급할 떄의 전류흐름이 상이한것 같다. 아래 그림의 나의 예상 전류흐름이다.</p>

<p><img src="/images/2024-01-30-codinglog(31)/image-20240130225449967.png" alt="image-20240130225449967" /></p>

<p>어쩃든 다음과 같이 두번째 경우로 전류흐름을 바꿔주고 다시 작업에 들어갔다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 가상환경 실행</span>
<span class="nb">source</span> ~/workspace/dcworks/env/bin/activate
<span class="c"># 차량에 접근</span>
<span class="nb">cd </span>mycar/
<span class="c"># 게임패드 리모컨으로 시작하기</span>
python manage.py drive <span class="nt">--js</span>
</code></pre></div></div>

<p>위와 같이 해주었는데도 차량이 움직이지 않아 해결책을 찾고있다.</p>

<p>(다음날, 교수님께 여쭤보러갔다가, 분해했는데, 모터전원버튼이 아래에 있는걸 알게되었다. 이걸 켜고 다시 작동시키니 작동이 되더라ㅋㅋㅋ)</p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-01" /><category term="C" /><summary type="html"><![CDATA[미니콘다 설치해보기 Host PC에 미니콘다를 설치해보았다.(테스트용)]]></summary></entry><entry><title type="html">코딩일지(2024-01-29)</title><link href="http://localhost:4000/2024-01/codinglog(30)/" rel="alternate" type="text/html" title="코딩일지(2024-01-29)" /><published>2024-01-29T00:00:00+09:00</published><updated>2024-01-29T00:00:00+09:00</updated><id>http://localhost:4000/2024-01/codinglog(30)</id><content type="html" xml:base="http://localhost:4000/2024-01/codinglog(30)/"><![CDATA[<h1 id="고전-신경망과-현대-신경망의-데이터-흐름에-대해서-발표준비">고전 신경망과 현대 신경망의 데이터 흐름에 대해서 발표준비</h1>
<h2 id="9311-1차원-합성곱이라-하는데-뭔말인지-모르겠다">9.3.1.1 1차원 합성곱이라 하는데 뭔말인지 모르겠다.</h2>

<p>예전에 신호및 시스템을 배웠을때 <strong><u>컨볼루션연산</u></strong>이라 함은 한 함수가 다른 함수 위에서 밀어서 이동하는 방식으로 진행하는 함수라 했다.</p>

<p>아래 예제코드는 1차원 신호에 대해서 컨볼루션 연산을 수행하는 예제라고 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">#넘파이 배열 생성
</span><span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)).</span><span class="nf">astype</span><span class="p">(</span><span class="sh">"</span><span class="s">int32</span><span class="sh">"</span><span class="p">)</span> <span class="c1">#1차원 신호 함수 생성
</span><span class="n">g</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span> <span class="c1">#컨볼루션에 사용될 필터 생성		
</span><span class="n">fp</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">convolve</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">)</span> <span class="c1">#컨볼루션 수행
</span></code></pre></div></div>

<ol>
  <li>넘파이 배열 생성</li>
</ol>

<p>-3에서부터 3까지의 구간을 스무개의 등간격으로 나눈 배열을 생성하고 x에 넣어줍니다.</p>

<ol>
  <li>1차원 신호 함수 생성</li>
</ol>

<p>x에 대한 1차원 신호 함수를 만들어 주고 f에 넣어줍니다. 이 함수는 정규 분포 형태를 따르는 가우시안 함수로, <code class="language-plaintext highlighter-rouge">np.exp</code>를 사용하여 계산되고, 그 값에 255를 곱해서 스케일링을 해줍니다.최종적으로 astype(“int32”)를 사용하여 정수형으로 변환됩니다.</p>

<ol>
  <li>컨볼루션에 사용될 필터 생성</li>
</ol>

<p>미분을 수행하기 위한 필터를 생성합니다. 이는 1차원 컨볼루션 사용될 필터입니다.</p>

<ol>
  <li>컨볼루션 수행</li>
</ol>

<p>np.convolve 함수를 상용하여 f와 g의 컨볼루션을 계산합니다. mode=’same’은 출력 배열의 크기를 입력배열과 동일하게 설정합니다.이를 위해서 가장자리에 0짜리 패딩을 채워주게 됩니다. 그리고 컨볼루션 연산을 직접 해보셨다면 알겠지만, 적분때리기 전에 먼저 필터를 반대로 뒤집는 작업을 해주는데요, 여기서도 마찬가지로 이를 위해 g[::-1]을 적어주었습니다.</p>

<h2 id="9312-2차원-합성곱에서-막혔다">9.3.1.2 2차원 합성곱에서 막혔다..</h2>

<p><img src="/images/2024-01-29-codinglog(30)/image-20240129122812758.png" alt="image-20240129122812758" /></p>

<p>일단 chatGPT에 넣어서 원인분석을 진행했다.</p>

<p>이 경고는 <code class="language-plaintext highlighter-rouge">scipy.misc.face</code>의 함수가 Scipy 버전1.10.0에서 더이상 사용되지 않는다는 것이었다. 뭔말이냐면, sicpy패키지 안에 서브패키지로 misc가 있고 그 안에 face라는 함수가 있는대, 그게 더이상 사용이 안된다는, deprecated되었다는 것이었다.(아무래도 교재 내용이 조금 옛날거라 그런것 같다. 이해하자).</p>

<p>그럼 아예 face()를 못쓰냐?그건 아니다. 현재 라이브러리의 표준문서가 조금 바뀐것  같은데, dataset이라는 서브패키지에 이 face()함수가 옮겨갔다고 한다. (참고로 이 face함수는 얼굴이미지를 가져오는 함수이다.)</p>

<p>그래서 문제가 해결되었나 싶은데 한번 더 문제가 발생했다. 버전충돌이었다.</p>

<p>대충 보니 paramiko라는 모듈이 설치되지 않았다고 한다. 그러니 설치!</p>

<p><img src="/images/2024-01-29-codinglog(30)/image-20240129123604717.png" alt="image-20240129123604717" /></p>

<p>이후 정상적으로 인터프리팅이 되었다. 코드는 다음과 같다.</p>

<p>코드에 대해 간략하게 설명하자면, 이미지를 전처리할때 수행하는 작업중 하나인 필터링(컨볼루션)을 수행하는 예제라고 한다. 컨볼루션은 이미지에서 특징과 패턴을 감지하는데 사용되는다는 것을 잊지 말자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 모듈 임포트
</span><span class="kn">from</span> <span class="n">scipy.signal</span> <span class="kn">import</span> <span class="n">convolve2d</span>
<span class="kn">from</span> <span class="n">scipy.datasets</span> <span class="kn">import</span> <span class="n">face</span>

<span class="c1"># 2. 이미지 로드해오과 잘라내기
</span><span class="n">img</span> <span class="o">=</span> <span class="nf">face</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">[:</span><span class="mi">512</span><span class="p">,</span> <span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">612</span><span class="p">):(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">100</span><span class="p">)]</span>

<span class="c1"># 3. 필터 정의하고 컨볼루션 수행하기
</span><span class="n">k</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">]])</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">convolve2d</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>모듈 임포트</li>
</ol>

<p>sigal과 datasets라는 서브모듈에서 convole2d와 face라는 함수를 가져와줍니다.</p>

<ol>
  <li>이미지 로드해오고 잘라내기</li>
</ol>

<p>face()에 True인수를 넣어 와꾸이미지를 가져와줍니다. 그 후에 이미지를 입력규격에 맞추기 위해 슬라이싱 작업을 하게 됩니다. 가로방향으로는 처음 512픽셀을 남기고, 세로 방향으로는 이미지 전체너비 -612에서 -100까지의 부분만 남기게 됩니다.</p>

<ol>
  <li>필터 정의하고 컨볼루션 수행하기</li>
</ol>

<p>3x3 크기의 필터 <code class="language-plaintext highlighter-rouge">k</code>를 정의하고, <code class="language-plaintext highlighter-rouge">convolve2d</code>함수를 사용하여 이미지 <code class="language-plaintext highlighter-rouge">img</code>에  이 필터를 적용합니다. <code class="language-plaintext highlighter-rouge">mode='same'</code>은 출력의 크기를 입력과 동일하게 유지하도록 지정합니다.</p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-01" /><category term="python" /><summary type="html"><![CDATA[고전 신경망과 현대 신경망의 데이터 흐름에 대해서 발표준비 9.3.1.1 1차원 합성곱이라 하는데 뭔말인지 모르겠다.]]></summary></entry><entry><title type="html">코딩일지(2024-01-28)</title><link href="http://localhost:4000/2024-01/codinglog(29)/" rel="alternate" type="text/html" title="코딩일지(2024-01-28)" /><published>2024-01-28T00:00:00+09:00</published><updated>2024-01-28T00:00:00+09:00</updated><id>http://localhost:4000/2024-01/codinglog(29)</id><content type="html" xml:base="http://localhost:4000/2024-01/codinglog(29)/"><![CDATA[<h1 id="디렉터리-구조에-대한-공부-그리고-vmware-설치해보기">디렉터리 구조에 대한 공부, 그리고 VMware 설치해보기</h1>

<h2 id="local-locallow-roaming">Local? LocalLow? Roaming?</h2>

<p>오늘 <strong>‘Keil uVision’</strong>을 지울려고 제어판에서 remove도 하고 경로추적해서 잡다한 데이터도 지우다가 해당 경로에 관심을 갖게 되었다.</p>

<p>바로 사용자 디렉토리 바로 아래에 있는 <strong>AppData</strong>라는 디렉토리이다.</p>

<p>그 아래에 다음과 같이 Local/LocalLow/Roaming이라는 디렉토리가 있었고, 내가 지우려는 STM32관련 데이터는 Local 아래 Arm이라는 폴더에 있었다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128102409836.png" alt="image-20240128102409836" /></p>

<p>이와 관련해서는 나중에 다시 알아봐야겠다. 일단 오늘은 그냥 지우는 것에서 만족하려고 한다.</p>

<hr />

<h2 id="vmware-설치해보기">VMware 설치해보기</h2>

<h3 id="다운을-받아보았다">다운을 받아보았다</h3>

<p>해당(<a href="https://www.vmware.com/kr/products/workstation-player/workstation-player-evaluation.html">링크</a>)에 들어가 주었다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105542682.png" alt="image-20240128105542682" /></p>

<p><strong>Windows용 Workstation 17 Player</strong> 사용해보기를 눌러 설치해주었다.</p>

<h3 id="설치를-진행해보았다">설치를 진행해보았다.</h3>

<p>설치파일을 실행하니 이렇게 떴다. Next!</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105345906.png" alt="image-20240128105345906" /></p>

<p>체크박스에 체크하고 Next!</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105406863.png" alt="image-20240128105406863" /></p>

<p>체크박스에 체크하고 Next!</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105433173.png" alt="image-20240128105433173" /></p>

<p>건드릴거 없이 Next!</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105636900.png" alt="image-20240128105636900" /></p>

<p>여기서는 두 항목 모두 체크를 해제하고 진행해주었다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105704158.png" alt="image-20240128105704158" /></p>

<p>여기서는 두 항목 모두 체크를 하고! 진행해주었다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105725977.png" alt="image-20240128105725977" /></p>

<p>여기서 <strong>Install</strong> 클릭!</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105750779.png" alt="image-20240128105750779" /></p>

<p>나는 1분 내외로 설치된 것 같다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128105843908.png" alt="image-20240128105843908" /></p>

<p>완료했으니 Finish를 눌렀다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128110153659.png" alt="image-20240128110153659" /></p>

<h3 id="설치된-vmware를-실행해보았다">설치된 VMware를 실행해보았다.</h3>

<p>나는 기업용이 아니라 단순 학습용이라 첫번째 체크박스에 체크하고 <u>**Continue**</u>를 눌렀다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128110354878.png" alt="image-20240128110354878" /></p>

<p>이 프로그램을 사용해줘서 고맙다고 하는데, 오히려 내가 감사한거 아닌가 싶다ㅎㅋㅎ</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128110550172.png" alt="image-20240128110550172" /></p>

<p>이제 드디어 워크스테이션에 들어왔다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128110644510.png" alt="image-20240128110644510" /></p>

<p>내가 이걸 깔아본건 나중에 여기다가 Arch Linux도 돌려보고 칼리 리눅스도 돌려보고 싶기 때문이다.(기대된다ㅎㅎ)</p>

<h3 id="실행한-vmware에-칼리리눅스를-깔아보았다">실행한 VMware에 칼리리눅스를 깔아보았다</h3>

<p>일단 해당(<a href="https://www.kali.org/get-kali/#kali-virtual-machines">링크</a>)에 들어갔다.그리고 아래 버튼을 눌러 .7z파일을 다운로드 받았다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128111856903.png" alt="image-20240128111856903" /></p>

<p>반디집으로 압출을 풀었다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128112222088.png" alt="image-20240128112222088" /></p>

<p>다 깔리고 나서 VMware에서 [Player]-[File]-[Open]로 들어갔다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128112608486.png" alt="image-20240128112608486" /></p>

<p>그리고 탐색기로 압축해제한 폴더에 접근했다. Kali-Linux-<version>-vmware-arm64 파일을 선택했다.(확장자는 vmx였다.)</version></p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128112658386.png" alt="image-20240128112658386" /></p>

<p>잘 열렸으니 바로 <u>**Play virtual machine**</u>를 눌렀고, 이후 체크박스 클릭후 OK를 눌렀다.</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128112827397.png" alt="image-20240128112827397" /></p>

<p>그러더니 로그인 창이 떴는데, 나는 ID에 kali, password에 kali를 쳤더니 로그인 되었다.(기본값이라 한다)</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128113058358.png" alt="image-20240128113058358" /></p>

<p>근데 한가지 문제 아닌 문제?가 생겼다. 분명 25기가 정도 여유가 있었는데, 벌써 3기가 밖에 안남았다.(이 무슨ㄷㄷ)</p>

<p><img src="/images/2024-01-28-codinglog(29)/image-20240128113222511.png" alt="image-20240128113222511" /></p>

<p>이 작업 하는 동안 22GB가 소요된 것이었다.</p>

<p>찾아보니 kali압축파일 풀은 것만 해도 13GB를 잡아먹는 것으로 확인됐다.</p>

<p>그래서 일단 급한 불을 끄려고 그냥 삭제했다.ㅜㅠㅠ</p>

<hr />]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-01" /><category term="C" /><summary type="html"><![CDATA[디렉터리 구조에 대한 공부, 그리고 VMware 설치해보기]]></summary></entry><entry><title type="html">코딩일지(2024-01-27)</title><link href="http://localhost:4000/2024-01/codinglog(28)/" rel="alternate" type="text/html" title="코딩일지(2024-01-27)" /><published>2024-01-27T00:00:00+09:00</published><updated>2024-01-27T00:00:00+09:00</updated><id>http://localhost:4000/2024-01/codinglog(28)</id><content type="html" xml:base="http://localhost:4000/2024-01/codinglog(28)/"><![CDATA[<h1 id="keil-uvision-설치">Keil uVision 설치</h1>

<p>아직 랩탑을 포맷하지 않았다. 이번에는 3학년 2학기때 마이크로프로세서 설계실험과목에서 사용했던 툴인 Keil uVision을 설치해보기로 했다.</p>

<p>여기 (<a href="https://dailyco.github.io/posts/MDK-install_arm_ide_keil_uvision/#3-optional-pack-installer%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-stm32f411re%EB%A5%BC-%EC%9C%84%ED%95%9C-pack-%EC%84%A4%EC%B9%98">링크</a>)를 보고 따라서 해보았다.</p>

<h2 id="mdk-arm-v5를-다운받았다">MDK-ARM v5를 다운받았다.</h2>

<p>1.MDK-ARM v5를 다운받기 위해 사이트에 들어갔다.(<a href="https://www.keil.com/">링크</a>)</p>

<p>2.우측 상단의 <code class="language-plaintext highlighter-rouge">Downloads</code>버튼을 눌렀다.</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127141533859.png" alt="image-20231230154210231" style="zoom:130%;" />
</div>

<p>3.Download Products에서 MDK-Arm을 선택한다.</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127141633361.png" alt="image-20231230154210231" style="zoom:130%;" />
</div>

<p>4.아래와 같이 정보를 입력해주고 “Submit” 클릭!</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127141816352.png" alt="image-20231230154210231" style="zoom:130%;" />
</div>

<p>5.그러면 .EXE파일을 다운받으라고 안내글이 뜬다. 다운로드를 했고 15분정도 걸렸던 것 같다.</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127141233538.png" alt="image-20231230154210231" style="zoom:100%;" />
</div>

<h2 id="mdk-arm-v5를-설치해보았다">MDK-ARM v5를 설치해보았다.</h2>

<p>1.설치된 파일을 실행시켰다.</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127145412737.png" alt="image-20231230154210231" style="zoom:100%;" />
</div>

<p>2.동의후 Next!</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127145605850.png" alt="image-20240127145605850" /></p>

<p>3.왠만하면 그냥 이대로 Next!</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127145755391.png" alt="image-20240127145755391" /></p>

<p>4.그러자 설치작업으로 넘어갔다.</p>

<div style="text-align:center;">
    <img src="/images/2024-01-27-codinglog(28)/image-20240127145829856.png" alt="image-20231230154210231" style="zoom:100%;" />
</div>

<p>5.여기서 [설치]를 한번더 클릭해줬다.</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127145916505.png" alt="image-20240127145916505" /></p>

<p>6.그러자 [Finish] 문구가 떠서 눌러줬다.</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127145953282.png" alt="image-20240127145953282" /></p>

<h2 id="packinstaller를-통해-디바이스에-맞게-pack들을-설치해줬다">PackInstaller를 통해 디바이스에 맞게 pack들을 설치해줬다.</h2>

<p>원래는 예전처럼 S32K144 디바이스에 맞게 팩들을 설치해주려고 했는데, 그 요구사항을 찾기가 어려웠다. 그래서 그나마 대중적으로 쓰이는 STM32에 맞게 팩들을 연습삼아 설치해주었다.</p>

<p>1.위에서 [Finish]버튼을 누르면 아래와 같은 창이 뜰텐데 ‘OK’를 눌러주자</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127150045074.png" alt="image-20240127150045074" /></p>

<p>2.이 (<a href="![image-20240127151846748](/images/2024-01-27-codinglog(28)/image-20240127151846748.png)">링크</a>)에 나온대로 항목을 설치해주었다.(시간이 오래 걸려서 과정은 패스!)</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127151836286.png" alt="image-20240127151836286" /></p>

<p>3.여기까지 깔면 ‘Keil uVision’을 사용하기 위한 환경설정이 모두 된 것이다. 인스톨러를 종료하고 ‘Keil uVision’에 들어가주었다.</p>

<p><img src="/images/2024-01-27-codinglog(28)/image-20240127152119170.png" alt="image-20240127152119170" /></p>

<p>정상적으로 들어가 진것을 확인하였다.</p>]]></content><author><name>YUNSUNGWOONG&lt;br&gt;&lt;p&gt;기억보다 기록을 추구하는 나의 코딩일지&lt;/p&gt;</name></author><category term="2024-01" /><category term="C" /><summary type="html"><![CDATA[Keil uVision 설치]]></summary></entry></feed>